require('dotenv').config()
const {
    Bot,
    GrammyError,
    HttpError,
    Keyboard,
    InlineKeyboard} = require('grammy')

const { hydrate } = require('@grammyjs/hydrate')

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

bot.api.setMyCommands([
    {
        command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
    },
    {
        command: 'hello', description: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    },
    {
        command: 'mood', description: '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
    },
    {
        command: 'share', description: '–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è',
    },
    {
        command: 'inline_keyboard', description: '–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è',
    },
    {
        command: 'menu', description:'–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é'
    }

])


bot.command('start', async (ctx) => {
    await ctx.react('üëç')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç\\! –Ø \\- –±–æ—Ç\\. –¢–≥ –∫–∞–Ω–∞–ª: *–Ω–µ–≥—Ä—ã*', {
        parse_mode: 'MarkdownV2'
    });
})

const menuKeyboard = new InlineKeyboard()
    .text('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', 'order-status')
    .text('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support')
const backKeyboard = new InlineKeyboard().text('< –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é','back')

bot.command('menu', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω–±', {
        reply_markup: menuKeyboard,
    });
});

bot.callbackQuery('order-status', async (ctx) => {
    await ctx.callbackQuery.message.editText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ø—É—Ç–∏', {
        reply_markup: backKeyboard
    });
    await ctx.answerCallbackQuery()
});

bot.callbackQuery('support', async (ctx) => {
    await ctx.callbackQuery.message.editText('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å', {
        reply_markup: backKeyboard
    });
    await ctx.answerCallbackQuery()
});

bot.callbackQuery('back', async (ctx) => {
    await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
        reply_markup: menuKeyboard
    });
    await ctx.answerCallbackQuery()
});

bot.command('mood', async (ctx) => {
    // const moodKeyBoard = new Keyboard().text('–•–æ—Ä–æ—à–æ').
    // row()
    //     .text('–ù–æ—Ä–º')
    //     .row()
    //     .text('–ü–ª–æ—Ö–æ')
    //     .resized()
    //     .oneTime()
    const moodLabels = ['–•–æ—Ä–æ—à–æ', '–ù–æ—Ä–º', '–ü–ª–æ—Ö–æ']
    const rows = moodLabels.map((label) => {
        return [
            Keyboard.text(label)
        ]
    })
    const moodKeyBoard2 = Keyboard.from(rows).resized()
    await ctx.reply ('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
       reply_markup: moodKeyBoard2
    })

})

bot.command('share', async (ctx) => {
    const shareKeyboard = new Keyboard().requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è').requestContact('–ö–æ–Ω—Ç–∞–∫—Ç').requestPoll('–û–ø—Ä–æ—Å')
        .placeholder('–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...').resized()
    await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', {
        reply_markup: shareKeyboard
    })

})

bot.command('inline_keyboard', async (ctx) => {
    //const inlineKeyboard = new InlineKeyboard()
        // .text('1', 'button-1').row()
        // .text('2', 'button-2').row()
        // .text('3', 'button-3')
    const inlineKeyboard2 = new InlineKeyboard().url('–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª', 'https://t.me/skywhyw4lker')
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É', {
        reply_markup: inlineKeyboard2
    })
})

// bot.callbackQuery(['button-1','button-2','button-3'], async (ctx) => {
//     await ctx.answerCallbackQuery('–©–∞ —è –¥—É–º–∞—é –µ–±–∞—Ç—å')
//     await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É')
// })

bot.callbackQuery(/button-[1-3]/, async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ ${ctx.callbackQuery.data}`)
})



// bot.on("callback_query:data", async (ctx) => {
//     await ctx.answerCallbackQuery()
//     await ctx.reply(`–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: ${ctx.callbackQuery.data}`)
// })

bot.on(':contact', async (ctx) => {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç')
})

bot.hears('–•–æ—Ä–æ—à–æ', async(ctx) => {
    await ctx.reply('–ù—É –∏ —Ö–æ—Ä–æ—à–æ —á—Ç–æ —Ö–æ—Ä–æ—à–æ', {
        reply_markup: {remove_keyboard: true}
    })
})

bot.hears('ID', async(ctx) => {
    await ctx.reply(`–í–∞—à id ${ctx.from.id}`)
})

bot.hears(/–ü—Ä–∏–≤–µ—Ç, —è –°–∞—à–∞/, async(ctx) => {
    await ctx.reply('–§—É, –ø–µ–¥–∏–∫')
})

bot.catch((err) => {
    const ctx = err.ctx;
    console.log(`Error while handling update ${ctx.update.update_id}`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request", e.description);
    } else if (e instanceof HttpError) {
        console.error("Unknown error", e);
    }
})

bot.start();